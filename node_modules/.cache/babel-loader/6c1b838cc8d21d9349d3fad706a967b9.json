{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.Button = exports.Inner = exports.Content = void 0;\n\nvar _styledBase = _interopRequireDefault(require(\"@emotion/styled-base\"));\n\nvar _isPropValid = _interopRequireDefault(require(\"@emotion/is-prop-valid\"));\n\nvar _styles = require(\"../styles\");\n\nvar _emotion = require(\"../utils/emotion\");\n\nvar _constants = require(\"./constants\");\n\nvar _themes = require(\"./themes\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar chooseColor = function chooseColor(_ref, theme) {\n  var disabled = _ref.disabled,\n      primary = _ref.primary,\n      minimal = _ref.minimal;\n\n  if (disabled) {\n    return theme.color_disabled;\n  } else if (primary) {\n    return theme.Button_color_primary;\n  } else if (minimal) {\n    return theme.Button_color_minimal;\n  } else {\n    return theme.Button_color;\n  }\n};\n\nvar Content = (\n/*#__PURE__*/\n0, _styledBase.default)('span', {\n  shouldForwardProp: function shouldForwardProp(prop) {\n    return prop !== 'size' && (0, _isPropValid.default)(prop);\n  },\n  target: \"e70ypka0\"\n})(function (_ref2) {\n  var size = _ref2.size,\n      baseTheme = _ref2.theme;\n  var theme = (0, _themes.buttonTheme)(baseTheme);\n  var rtl = theme.direction === 'rtl';\n  var firstChildPaddingProperty = rtl ? 'paddingRight' : 'paddingLeft';\n  var lastChildPaddingProperty = rtl ? 'paddingLeft' : 'paddingRight';\n  var paddings;\n  var fontSize = size === _constants.SIZE.small ? theme.ButtonContent_fontSize_small : theme.ButtonContent_fontSize;\n\n  if (size === undefined || size === _constants.SIZE.large || size === _constants.SIZE.jumbo) {\n    var _ref3, _lastChild, _paddings;\n\n    var padding = (0, _styles.getNormalizedValue)(theme.Button_paddingHorizontal, fontSize);\n    paddings = (_paddings = {}, _paddings['&:first-child' + _emotion.ignoreSsrWarning] = (_ref3 = {}, _ref3[firstChildPaddingProperty] = padding, _ref3), _paddings['&:last-child'] = (_lastChild = {}, _lastChild[lastChildPaddingProperty] = padding, _lastChild), _paddings);\n  }\n\n  return _objectSpread({}, {\n    display: \"inline-block\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    wordWrap: \"normal\"\n  }, {\n    display: 'block',\n    fontSize: fontSize,\n    lineHeight: (0, _styles.getNormalizedValue)(theme[\"Button_height_\" + size], fontSize)\n  }, paddings);\n});\nexports.Content = Content;\nvar Inner = (\n/*#__PURE__*/\n0, _styledBase.default)('span', {\n  target: \"e70ypka1\"\n})({\n  name: \"1xssqnp\",\n  styles: \"align-items:center;display:inline-flex;justify-content:center;max-height:100%;pointer-events:none;width:100%;\"\n});\nexports.Inner = Inner;\nvar Button = (\n/*#__PURE__*/\n0, _styledBase.default)('button', {\n  shouldForwardProp: function shouldForwardProp(prop) {\n    return prop !== 'size' && (0, _isPropValid.default)(prop);\n  },\n  target: \"e70ypka2\"\n})(function (_ref4) {\n  var _ref5, _roleImgLast, _objectSpread2;\n\n  var circular = _ref4.circular,\n      disabled = _ref4.disabled,\n      fullWidth = _ref4.fullWidth,\n      minimal = _ref4.minimal,\n      primary = _ref4.primary,\n      size = _ref4.size,\n      text = _ref4.text,\n      baseTheme = _ref4.theme,\n      variant = _ref4.variant;\n  var theme = (0, _themes.buttonTheme)(baseTheme);\n  var rtl = theme.direction === 'rtl';\n  var firstChildMarginProperty = rtl ? 'marginLeft' : 'marginRight';\n  var lastChildMarginProperty = rtl ? 'marginRight' : 'marginLeft';\n\n  if (variant) {\n    // prettier-ignore\n    theme = _objectSpread({}, theme, {\n      Button_backgroundColor_primary: theme[\"backgroundColor_\" + variant + \"Primary\"],\n      Button_backgroundColor_primary_active: theme[\"backgroundColor_\" + variant + \"Primary_active\"],\n      Button_backgroundColor_primary_focus: theme[\"backgroundColor_\" + variant + \"Primary_focus\"],\n      Button_backgroundColor_primary_hover: theme[\"backgroundColor_\" + variant + \"Primary_hover\"],\n      Button_borderColor_active: theme[\"borderColor_\" + variant + \"_active\"],\n      Button_borderColor_focus: theme[\"borderColor_\" + variant + \"_focus\"],\n      Button_borderColor_hover: theme[\"borderColor_\" + variant + \"_hover\"],\n      Button_boxShadow_focus: \"0 0 0 1px \" + theme.boxShadow_focusInner + \", 0 0 0 2px \" + theme[\"borderColor_\" + variant + \"_focus\"],\n      Button_color: theme[\"color_\" + variant],\n      Button_color_primary: theme[\"color_\" + variant + \"Primary\"],\n      Button_color_minimal: theme[\"color_\" + variant],\n      ButtonIcon_color: theme[\"icon_color_\" + variant]\n    });\n  }\n\n  var color = chooseColor({\n    disabled: disabled,\n    primary: primary,\n    minimal: minimal\n  }, theme);\n  return _objectSpread({}, (0, _styles.componentStyleReset)(baseTheme), (_objectSpread2 = {\n    backgroundColor: function () {\n      if (disabled && !minimal) {\n        return theme.backgroundColor_disabled;\n      } else if (primary) {\n        return theme.Button_backgroundColor_primary;\n      } else if (minimal) {\n        return 'transparent';\n      } else {\n        return theme.Button_backgroundColor;\n      }\n    }(),\n    borderColor: disabled || primary || minimal ? 'transparent' : theme.Button_borderColor,\n    borderRadius: circular ? parseFloat(theme[\"Button_height_\" + size]) / 2 + \"em\" : theme.Button_borderRadius,\n    borderStyle: 'solid',\n    borderWidth: theme.Button_borderWidth + \"px\",\n    color: color,\n    cursor: disabled ? 'default' : 'pointer',\n    display: 'inline-block',\n    fontWeight: theme.Button_fontWeight,\n    height: theme[\"Button_height_\" + size],\n    margin: 0,\n    // if the user puts in a small icon in a large button\n    // we want to force the button to be round/square\n    // (really just pertinent on icon-only buttons)\n    minWidth: theme[\"Button_height_\" + size],\n    padding: text === undefined ? theme[\"Button_paddingIconOnly_\" + size] : \"0 \" + theme.Button_paddingHorizontal,\n    textDecoration: 'none',\n    verticalAlign: 'middle',\n    width: fullWidth && '100%',\n    '&:focus': !disabled && {\n      backgroundColor: function () {\n        if (primary) {\n          return theme.Button_backgroundColor_primary_focus;\n        } else if (minimal) {\n          return theme.Button_backgroundColor_minimal_focus;\n        } else {\n          return theme.Button_backgroundColor_focus;\n        }\n      }(),\n      borderColor: minimal ? theme.Button_borderColor_focus : undefined,\n      boxShadow: minimal ? undefined : theme.Button_boxShadow_focus,\n      color: color,\n      textDecoration: 'none'\n    },\n    '&:hover': {\n      backgroundColor: function () {\n        if (!disabled) {\n          if (primary) {\n            return theme.Button_backgroundColor_primary_hover;\n          } else if (minimal) {\n            return theme.Button_backgroundColor_minimal_hover;\n          } else {\n            return theme.Button_backgroundColor_hover;\n          }\n        }\n      }(),\n      borderColor: disabled || minimal || primary ? undefined : theme.Button_borderColor_hover,\n      color: color,\n      textDecoration: 'none'\n    },\n    '&:focus:active, &:focus:hover': {\n      borderColor: function () {\n        if (primary) {\n          return 'transparent';\n        } else if (minimal) {\n          return theme.Button_borderColor_focus;\n        } else {\n          return theme.Button_borderColor;\n        }\n      }()\n    },\n    // `:active` must be last, to follow LVHFA order:\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/:active\n    '&:active': {\n      backgroundColor: function () {\n        if (!disabled) {\n          if (primary) {\n            return theme.Button_backgroundColor_primary_active;\n          } else if (minimal) {\n            return theme.Button_backgroundColor_minimal_active;\n          } else {\n            return theme.Button_backgroundColor_active;\n          }\n        }\n      }(),\n      borderColor: !minimal && !disabled ? theme.Button_borderColor_active : undefined,\n      color: color\n    },\n    '&::-moz-focus-inner': {\n      border: 0\n    },\n    '& [role=\"img\"]': {\n      boxSizing: 'content-box',\n      color: disabled || primary ? null : theme.ButtonIcon_color,\n      display: 'block',\n      flexShrink: 0\n    }\n  }, _objectSpread2['& [role=\"img\"]:first-child' + _emotion.ignoreSsrWarning] = (_ref5 = {}, _ref5[firstChildMarginProperty] = theme.ButtonIcon_margin, _ref5), _objectSpread2['& [role=\"img\"]:last-child'] = (_roleImgLast = {}, _roleImgLast[lastChildMarginProperty] = theme.ButtonIcon_margin, _roleImgLast), _objectSpread2['& [role=\"img\"]:only-child'] = {\n    margin: 0\n  }, _objectSpread2));\n});\nexports.Button = Button;","map":null,"metadata":{},"sourceType":"script"}