{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar _exenv = require(\"exenv\");\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar EventListener =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(EventListener, _Component);\n\n  function EventListener() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = EventListener.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.addEventListeners();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    this.removeEventListeners(prevProps.listeners);\n    this.addEventListeners();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.removeEventListeners();\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  _proto.getTargetNode = function getTargetNode(target) {\n    if (_exenv.canUseDOM) {\n      return global[target] || global.document.querySelector(target);\n    }\n  };\n\n  _proto.addEventListeners = function addEventListeners(listeners) {\n    var _this = this;\n\n    if (listeners === void 0) {\n      listeners = this.props.listeners;\n    }\n\n    if (_exenv.canUseEventListeners) {\n      listeners.forEach(function (_ref) {\n        var target = _ref.target,\n            event = _ref.event,\n            handler = _ref.handler,\n            options = _ref.options;\n\n        var node = _this.getTargetNode(target);\n\n        node && node.addEventListener(event, handler, options);\n      });\n    }\n  };\n\n  _proto.removeEventListeners = function removeEventListeners(listeners) {\n    var _this2 = this;\n\n    if (listeners === void 0) {\n      listeners = this.props.listeners;\n    }\n\n    if (_exenv.canUseEventListeners) {\n      listeners.forEach(function (_ref2) {\n        var target = _ref2.target,\n            event = _ref2.event,\n            handler = _ref2.handler,\n            options = _ref2.options;\n\n        var node = _this2.getTargetNode(target);\n\n        node && node.removeEventListener(event, handler, options);\n      });\n    }\n  };\n\n  return EventListener;\n}(_react.Component);\n\nexports.default = EventListener;\n\n_defineProperty(EventListener, \"displayName\", 'EventListener');","map":null,"metadata":{},"sourceType":"script"}