{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = exports.getPrevNonNull = void 0;\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\n * Converts an array of breakpoints (numbers and theme variable keys) to an\n * array of CSS media query strings.\n *\n * Input: [100, 200]\n *\n * Ouput: [\n *   '@media (min-width: 100px) and (max-width: 199px)',\n *   '@media (min-width: 200px)'\n * ]\n */\n\n\nvar getMediaQueries = function getMediaQueries(breakpoints, theme) {\n  var queries = [];\n\n  var getQueryWidth = function getQueryWidth(value) {\n    return typeof value === 'number' ? value + \"px\" : theme[\"breakpoint_\" + value] || value;\n  };\n\n  for (var i = 0; i <= breakpoints.length; i++) {\n    if (i === breakpoints.length) {\n      queries.push(\"@media (min-width: \" + getQueryWidth(breakpoints[i - 1]) + \")\");\n    } else if (i > 0) {\n      queries.push(\"@media (min-width: \" + getQueryWidth(breakpoints[i - 1]) + \") and (max-width: \" + (parseInt(getQueryWidth(breakpoints[i])) - 1) + \"px)\");\n    }\n  }\n\n  return queries;\n};\n/*\n * Given array that can contain null values and an index, checks if array[index]\n * is null. If it is, then it returns the next-most-previous non-null value in\n * the array until it gets to array[0], which it returns regardless.\n */\n\n\nvar getPrevNonNull = function getPrevNonNull(values, index) {\n  var value = Array.isArray(values) && values[index];\n\n  if (index > 0) {\n    return value === null ? getPrevNonNull(values, index - 1) : value;\n  } else {\n    return value;\n  }\n};\n/*\n * Returns an object of style properties and their values (as interpreted\n * through mapValueToProperty, if provided). If an index is provided, then each\n * style property is an array, and this will use array[index] as the value.\n */\n\n\nexports.getPrevNonNull = getPrevNonNull;\n\nvar getStyles = function getStyles(styleKeys, styles, mapValueToProperty, index) {\n  return styleKeys.reduce(function (acc, property) {\n    var indexInUse = index || 0;\n    var styleValue = styles[property];\n    var actualValue = Array.isArray(styleValue) ? getPrevNonNull(styleValue, indexInUse) : styleValue;\n    acc[property] = mapValueToProperty ? mapValueToProperty(property, actualValue) : actualValue;\n    return acc;\n  }, {});\n};\n/*\n * Helper to potentially disperse an object of style properties (whole values\n * can be an array) across a provided (optional) array of breakpoints, which is\n * converted to an object with CSS media query string keys.\n *\n * See tests for input/output.\n */\n\n\nvar getResponsiveStyles = function getResponsiveStyles(_ref) {\n  var breakpoints = _ref.breakpoints,\n      mapValueToProperty = _ref.mapValueToProperty,\n      styles = _ref.styles,\n      theme = _ref.theme;\n  var styleKeys = Object.keys(styles);\n\n  if (breakpoints) {\n    var breakpointsLength = breakpoints.length;\n    var mediaQueries = getMediaQueries(breakpoints, theme);\n    var responsiveStyleKeys = styleKeys.filter(function (key) {\n      var value = styles[key];\n\n      if (value && Array.isArray(value)) {\n        /*\n         * If a style property is an array, that array must be one longer than\n         * the breakpoints array. The first value is the no-breakpoint case, the\n         * second value corresponds to the first breakpoint, etc...\n         */\n        if (value.length === breakpointsLength + 1) {\n          return true;\n        } else {\n          // prettier-ignore\n          throw new Error(key + \".length (\" + value.length + \") must equal breakpoints.length + 1 (\" + (breakpointsLength + 1) + \")\");\n        }\n      }\n    });\n    var nonResponsiveStyleKeys = styleKeys.filter(function (key) {\n      return !Array.isArray(styles[key]);\n    }); // Start with the non-responsive style properties and the first value of the\n    // responsive properties.\n\n    var result = _objectSpread({}, getStyles(nonResponsiveStyleKeys, styles, mapValueToProperty), getStyles(responsiveStyleKeys, styles, mapValueToProperty, 0));\n\n    return mediaQueries.reduce(function (acc, query, index) {\n      acc[query] = _objectSpread({}, getStyles(responsiveStyleKeys, styles, mapValueToProperty, index + 1));\n      return acc;\n    }, result);\n  } else {\n    return getStyles(styleKeys, styles, mapValueToProperty);\n  }\n};\n\nvar _default = getResponsiveStyles;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}